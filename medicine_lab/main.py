import sqlite3
import telebot
import pandas as pd
from telebot.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from datetime import datetime
import os

TOKEN = "7857050136:AAE-ZyTtmR8VCAQgeWJdTbPFf4IFk-qAI0M"
ADMIN_ID = [767393993, 355829421, 870756798]
bot = telebot.TeleBot(TOKEN)

# üîπ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
BASE_DIR = os.path.dirname(os.path.abspath(__file__))
DB_PATH = os.path.join(BASE_DIR, "bot_database.db")

conn = sqlite3.connect(DB_PATH, check_same_thread=False)
cursor = conn.cursor()

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
cursor.execute('''
CREATE TABLE IF NOT EXISTS users (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    tg_id INTEGER UNIQUE,
    full_name TEXT,
    department TEXT
)
''')

cursor.execute('''
CREATE TABLE IF NOT EXISTS requests (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    sample_id TEXT,
    mass_or_concentration TEXT,
    project TEXT,
    study_type TEXT,
    note TEXT,
    timestamp TEXT,
    solvent TEXT, 
    expected_result TEXT,
    FOREIGN KEY (user_id) REFERENCES users (id)
)
''')
conn.commit()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ–∂–∏–¥–∞–µ–º–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
kb_expected_result = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
kb_expected_result.add("–ü—Ä–æ—Ç–æ–∫–æ–ª –ø–æ —Ñ–æ—Ä–º–µ", "RAW-data", "–ü—Ä–∏–±–æ—Ä–Ω—ã–π –æ—Ç—á—ë—Ç", "–ù–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è")

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Ä–∞—Å—Ç–≤–æ—Ä–∏—Ç–µ–ª—è
kb_solvents = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
kb_solvents.add("ACN 100%", "ACN 70%", "MeOH", "–î—Ä—É–≥–æ–µ")

kb_user = ReplyKeyboardMarkup(resize_keyboard=True).add(
    KeyboardButton("–°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É"), 
    KeyboardButton("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è")
)

kb_admin = ReplyKeyboardMarkup(resize_keyboard=True).add(
    # KeyboardButton("–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –∑–∞—è–≤–∫–∏"),
    KeyboardButton("–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç"), 
    KeyboardButton("–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"), 
    KeyboardButton("–£–¥–∞–ª–∏—Ç—å –∑–∞—è–≤–∫—É") 
)

projects = ["CSE", "LPS", "Selexipag", "Risdiplam", "Ataluren", "Bromantane", "GLP1R", "–î—Ä—É–≥–æ–µ"]
kb_projects = ReplyKeyboardMarkup(resize_keyboard=True)
for project in projects:
    kb_projects.add(KeyboardButton(project))

study_types = [
    "–ê–Ω–∞–ª–∏–∑ —Ä–µ–∞–∫—Ü–∏–æ–Ω–Ω–æ–π —Å–º–µ—Å–∏ (–ì–•-–ú–°-–ü–ò–î)",
    "–ê–Ω–∞–ª–∏–∑ —Ä–µ–∞–∫—Ü–∏–æ–Ω–Ω–æ–π —Å–º–µ—Å–∏ (–í–≠–ñ–•-–£–§-–ú–°)"
]
kb_study_types = ReplyKeyboardMarkup(resize_keyboard=True)
for study in study_types:
    kb_study_types.add(KeyboardButton(study))

@bot.message_handler(commands=['start'])
def start_command(message):
    cursor.execute("SELECT id FROM users WHERE tg_id = ?", (message.from_user.id,))
    user = cursor.fetchone()

    if message.chat.id in ADMIN_ID:
        bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç, –∞–¥–º–∏–Ω! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb_admin)
    elif user:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏
        bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb_user)
    else:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É —Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        kb_register = ReplyKeyboardMarkup(resize_keyboard=True).add(KeyboardButton("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è"))
        bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –í–∞–º –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.", reply_markup=kb_register)

@bot.message_handler(func=lambda message: message.text == "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è")
def register_user(message):
    cursor.execute("SELECT id FROM users WHERE tg_id = ?", (message.from_user.id,))
    user = cursor.fetchone()

    if user:
        bot.send_message(message.chat.id, "–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!", reply_markup=kb_user)
    else:
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:")
        bot.register_next_step_handler(message, get_full_name)

def get_full_name(message):
    full_name = message.text
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:")
    bot.register_next_step_handler(message, lambda msg: save_user(msg, message.from_user.id, full_name))

def save_user(message, tg_id, full_name):
    department = message.text

    cursor.execute("SELECT id FROM users WHERE tg_id = ?", (tg_id,))
    user_exists = cursor.fetchone()

    if user_exists:
        bot.send_message(message.chat.id, "–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!", reply_markup=kb_user)
        return

    cursor.execute("INSERT INTO users (tg_id, full_name, department) VALUES (?, ?, ?)", (tg_id, full_name, department))
    conn.commit()

    # –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏
    bot.send_message(message.chat.id, "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!", reply_markup=kb_user)


@bot.message_handler(func=lambda message: message.text == "–°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É")
def create_request(message):
    cursor.execute("SELECT id FROM users WHERE tg_id = ?", (message.from_user.id,))
    user = cursor.fetchone()
    if not user:
        bot.send_message(message.chat.id, "–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å!")
        return
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ ID –æ–±—Ä–∞–∑—Ü–∞:", reply_markup=ReplyKeyboardRemove())
    bot.register_next_step_handler(message, lambda msg: ask_mass_or_concentration(msg, user[0]))

def ask_mass_or_concentration(message, user_id):
    sample_id = message.text
    markup = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add("–ú–∞—Å—Å–∞ (–º–≥)", "–û–±—ä–µ–º/–∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è (–º–∫–ª - –º–≥/–º–ª)")
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ: –º–∞—Å—Å–∞ (–º–≥) –∏–ª–∏ –æ–±—ä–µ–º/–∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è (–º–∫–ª - –º–≥/–º–ª)", reply_markup=markup)
    bot.register_next_step_handler(message, lambda msg: ask_user_input_for_mass_or_concentration(msg, user_id, sample_id))

def ask_user_input_for_mass_or_concentration(message, user_id, sample_id):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º, —á—Ç–æ –≤—ã–±—Ä–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    # selected_option = message.text

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤–≤–æ–¥ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 5.5 –º–≥ –∏–ª–∏ 10 –º–∫–ª - –º–≥/–º–ª):")
    bot.register_next_step_handler(message, lambda msg: ask_project(msg, user_id, sample_id, msg.text))


def ask_project(message, user_id, sample_id, user_input):
    mass_or_concentration = user_input
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç:", reply_markup=kb_projects)
    bot.register_next_step_handler(message, lambda msg: ask_study_type(msg, user_id, sample_id, mass_or_concentration, msg.text))

def ask_study_type(message, user_id, sample_id, mass_or_concentration, project):
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è:", reply_markup=kb_study_types)
    bot.register_next_step_handler(message, lambda msg: ask_solvent(msg, user_id, sample_id, mass_or_concentration, project, msg.text))

def ask_solvent(message, user_id, sample_id, mass_or_concentration, project, study_type):
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å—Ç–≤–æ—Ä–∏—Ç–µ–ª—å:", reply_markup=kb_solvents)
    bot.register_next_step_handler(message, lambda msg: handle_solvent(msg, user_id, sample_id, mass_or_concentration, project, study_type))

def handle_solvent(message, user_id, sample_id, mass_or_concentration, project, study_type):
    if message.text == "–î—Ä—É–≥–æ–µ":
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞—Å—Ç–≤–æ—Ä–∏—Ç–µ–ª—è –≤—Ä—É—á–Ω—É—é:", reply_markup=ReplyKeyboardRemove())
        bot.register_next_step_handler(message, lambda msg: ask_expected_result(msg, user_id, sample_id, mass_or_concentration, project, study_type, msg.text))
    else:
        ask_expected_result(message, user_id, sample_id, mass_or_concentration, project, study_type, message.text)

def ask_expected_result(message, user_id, sample_id, mass_or_concentration, project, study_type, solvent):
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –æ–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞:", reply_markup=kb_expected_result)
    bot.register_next_step_handler(message, lambda msg: ask_note(msg, user_id, sample_id, mass_or_concentration, project, study_type, solvent, msg.text))


def ask_note(message, user_id, sample_id, mass_or_concentration, project, study_type, solvent, expected_result):
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ:", reply_markup=ReplyKeyboardRemove())
    bot.register_next_step_handler(message, lambda msg: save_request(msg, user_id, sample_id, mass_or_concentration, project, study_type, solvent, expected_result))

def save_request(message, user_id, sample_id, mass_or_concentration, project, study_type, solvent, expected_result):
    note = message.text
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    # –ü–æ–ª—É—á–∞–µ–º –§–ò–û –∑–∞–∫–∞–∑—á–∏–∫–∞
    cursor.execute("SELECT full_name FROM users WHERE id = ?", (user_id,))
    user_data = cursor.fetchone()
    full_name = user_data[0] if user_data else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞—è–≤–∫—É –≤ –ë–î
    cursor.execute("INSERT INTO requests (user_id, sample_id, mass_or_concentration, project, study_type, note, timestamp, solvent, expected_result) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)",
                (user_id, sample_id, mass_or_concentration, project, study_type, note, timestamp, solvent, expected_result))
    conn.commit()

    # –ü–æ–ª—É—á–∞–µ–º ID —Ç–æ–ª—å–∫–æ —á—Ç–æ –≤—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–π –∑–∞—è–≤–∫–∏
    request_id = cursor.lastrowid

    # –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID –∑–∞—è–≤–∫–∏
    bot.send_message(message.chat.id, f"‚úÖ –ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞! ID –∑–∞—è–≤–∫–∏: {request_id}", reply_markup=kb_user)

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É —Å –§–ò–û –∑–∞–∫–∞–∑—á–∏–∫–∞
    for admin in ADMIN_ID:
        try:
            bot.send_message(admin, f"üìå –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞!\nüë§ –ó–∞–∫–∞–∑—á–∏–∫: {full_name}\nüîπ ID –∑–∞—è–≤–∫–∏: {request_id}\nüîπ ID –æ–±—Ä–∞–∑—Ü–∞: {sample_id}\n‚öñ –ú–∞—Å—Å–∞/–∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è: {mass_or_concentration}\nüìÇ –ü—Ä–æ–µ–∫—Ç: {project}\nüî¨ –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ: {study_type}\nüß™ –†–∞—Å—Ç–≤–æ—Ä–∏—Ç–µ–ª—å: {solvent}\nüìÑ –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {expected_result}\nüìù –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: {note}\n")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω—É {admin}: {e}")


# =======================
# üîπ –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –∑–∞—è–≤–æ–∫ (–¥–ª—è –∞–¥–º–∏–Ω–∞)
# =======================
# @bot.message_handler(func=lambda message: message.text == "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –∑–∞—è–≤–∫–∏")
# def view_requests(message):
#     if message.chat.id not in ADMIN_ID:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –∞–¥–º–∏–Ω
#         return

#     cursor.execute('''
#         SELECT r.id, r.sample_id, r.mass_or_concentration, r.project, r.study_type, u.full_name, r.timestamp, r.note, r.solvent 
#         FROM requests r 
#         JOIN users u ON r.user_id = u.id
#     ''')
#     requests = cursor.fetchall()

#     if not requests:
#         bot.send_message(message.chat.id, "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫.")
#         return

#     response = "üìå –°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫:\n"
#     for req in requests:
#         response += (f"üîπ ID –∑–∞—è–≤–∫–∏: {req[0]}\n"
#                         f"üìå ID –æ–±—Ä–∞–∑—Ü–∞: {req[1]}\n"
#                         f"‚öñ –ú–∞—Å—Å–∞/–∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è: {req[2]}\n"
#                         f"üìÇ –ü—Ä–æ–µ–∫—Ç: {req[3]}\n"
#                         f"üî¨ –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ: {req[4]}\n"
#                         f"üë§ –ó–∞–∫–∞–∑—á–∏–∫: {req[5]}\n"
#                         f"üìÖ –î–∞—Ç–∞: {req[6]}\n"
#                         f"üß™ –†–∞—Å—Ç–≤–æ—Ä–∏—Ç–µ–ª—å: {req[8]}\n"
#                         f"üìù –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: {req[7]}\n"
#                         "----------------------\n")

#     bot.send_message(message.chat.id, response)

# =======================
# üîπ –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á—ë—Ç–∞ –≤ Excel (–¥–ª—è –∞–¥–º–∏–Ω–∞)
# =======================
@bot.message_handler(func=lambda message: message.text == "–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç")
def generate_report(message):
    if message.chat.id not in ADMIN_ID:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –∞–¥–º–∏–Ω
        return
    cursor.execute('''
        SELECT r.sample_id, u.full_name, r.mass_or_concentration, r.project, 
               r.timestamp, r.study_type, r.solvent, r.expected_result, r.note 
        FROM requests r 
        JOIN users u ON r.user_id = u.id
    ''')
    requests = cursor.fetchall()

    if not requests:
        bot.send_message(message.chat.id, "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—á—ë—Ç–∞.")
        return

    df = pd.DataFrame(requests, columns=[
        "ID –æ–±—Ä–∞–∑—Ü–∞", "–ó–∞–∫–∞–∑—á–∏–∫", "–ú–∞—Å—Å–∞/–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è", "–ü—Ä–æ–µ–∫—Ç", 
        "–î–∞—Ç–∞ –∑–∞—è–≤–∫–∏", "–¢–∏–ø –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è", "–†–∞—Å—Ç–≤–æ—Ä–∏—Ç–µ–ª—å", 
        "–û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç", "–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ"
    ])
    file_path = "report.xlsx"
    df.to_excel(file_path, index=False)

    with open(file_path, "rb") as file:
        bot.send_document(message.chat.id, file, caption="üìÑ –û—Ç—á—ë—Ç –ø–æ –∑–∞—è–≤–∫–∞–º")




@bot.message_handler(func=lambda message: message.text == "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
def view_users(message):
    if message.chat.id not in ADMIN_ID:
        return
    

    # conn = sqlite3.connect("bot_database.db") 
    # cursor = conn.cursor()
    
    cursor.execute("SELECT id, tg_id, full_name, department FROM users") 
    users = cursor.fetchall()


    if users:
        response = "–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n"
        for user in users:
            response += f"ID: {user[0]}, Telegram ID: {user[1]}, –ò–º—è: {user[2]}, –û—Ç–¥–µ–ª: {user[3]}\n"
    else:
        response = "–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."

    bot.send_message(message.chat.id, response)



@bot.message_handler(func=lambda message: message.text == "–£–¥–∞–ª–∏—Ç—å –∑–∞—è–≤–∫—É")
def delete_request(message):
    if message.chat.id not in ADMIN_ID:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –∞–¥–º–∏–Ω
        return

    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ ID –∑–∞—è–≤–∫–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:", reply_markup=ReplyKeyboardRemove())
    bot.register_next_step_handler(message, handle_delete_request)

def handle_delete_request(message):
    try:
        request_id = int(message.text)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ —á–∏—Å–ª–æ

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∑–∞—è–≤–∫–∞ —Å —Ç–∞–∫–∏–º ID
        cursor.execute("SELECT id FROM requests WHERE id = ?", (request_id,))
        request = cursor.fetchone()

        if request:
            cursor.execute("DELETE FROM requests WHERE id = ?", (request_id,))
            conn.commit()
            bot.send_message(message.chat.id, f"‚úÖ –ó–∞—è–≤–∫–∞ —Å ID {request_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!")
        else:
            bot.send_message(message.chat.id, "‚ùå –ó–∞—è–≤–∫–∞ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        
        # –ü–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ (–∏–ª–∏ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏) –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∞–¥–º–∏–Ω—Å–∫–∏–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb_admin)

    except ValueError:
        bot.send_message(message.chat.id, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∑–∞—è–≤–∫–∏.")
        bot.send_message(message.chat.id, "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:", reply_markup=ReplyKeyboardRemove())
        bot.register_next_step_handler(message, handle_delete_request)





# =======================
# üîπ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
# =======================
if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    bot.polling(none_stop=True)
